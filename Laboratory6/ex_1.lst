     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 6162636465                  s db 'a', 'b', 'c', 'd', 'e' ; source string
    14                                      len_s equ $-s ; length of source string
    15 00000005 00<rept>                    d times len_s db 0 ; destination string
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; initialisation
    21                                          
    22 00000000 B905000000                      mov ecx, len_s
    23 00000005 BE[00000000]                    mov esi, s ; offset of source string
    24 0000000A BF[05000000]                    mov edi, d ; offset of destination string
    25 0000000F FC                              cld ; clear DF (DF = 0)
    26                                          
    27 00000010 E303                            jecxz end_prog ; jump if ECX = 0
    28                                          
    29                                          read_byte:
    30                                              ;lodsb ; AL = a and ESI = ESI + 1
    31                                              ;stosb ; mov [d], AL and EDI = EDI + 1
    32 00000012 A4                                  movsb
    33 00000013 E2FD                            loop read_byte
    34                                              
    35                                          end_prog:
    36                                      
    37                                          ; exit(0)
    38 00000015 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 00000017 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
