     1                                  ;26. Given 2 doublewords R and T. Compute the doubleword Q as follows:
     2                                  ; the bits 0-6 of Q are the same as the bits 10-16 of T
     3                                  ; the bits 7-24 of Q are the same as the bits 7-24 of (R XOR T).
     4                                  ; the bits 25-31 of Q are the same as the bits 5-11 of R.
     5                                  
     6                                  bits 32 ; assembling for the 32 bits architecture
     7                                  
     8                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     9                                  global start        
    10                                  
    11                                  ; declare external functions needed by our program
    12                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    13                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; define R, T and Q as doublewords
    19 00000000 7A467213                    R dd 00010011011100100100011001111010b
    20 00000004 8A6B89A3                    T dd 10100011100010010110101110001010b
    21 00000008 00000000                    Q dd 0
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                      
    27 00000000 BB00000000                      mov ebx, 0 ; we compute the result in BX
    28                                          
    29 00000005 A1[04000000]                    mov eax, [T] ; EAX = T
    30 0000000A 2500FC0100                      and eax, 00000000000000011111110000000000b ; we isolate bits 10-16 of T
    31 0000000F B10A                            mov cl, 10
    32 00000011 D3C8                            ror eax, cl ; we rotate 10 positions to the right (10-16 -> 0-6)
    33 00000013 09C3                            or ebx, eax ; we put the bits into the result
    34                                          
    35 00000015 A1[00000000]                    mov eax, [R] ; EAX = R
    36 0000001A 3305[04000000]                  xor eax, [T]; EAX = R xor T
    37 00000020 2580FFFF01                      and eax, 00000001111111111111111110000000b ; we isolate bits 7-24 of (R xor T)
    38 00000025 09C3                            or ebx, eax ; we put the bits into the result
    39                                          
    40 00000027 A1[00000000]                    mov eax, [R] ; EAX = R
    41 0000002C 25E00F0000                      and eax, 00000000000000000000111111100000b ; we isolate bits 5-11 of R
    42 00000031 B114                            mov cl, 20
    43 00000033 D3C0                            rol eax, cl ; we rotate 20 positions to the left (5-11 -> 25-31)
    44 00000035 09C3                            or ebx, eax ; we put the bits into the result
    45                                          
    46 00000037 891D[08000000]                  mov [Q], ebx ; Q = EBX, expected result: 01100110000001001001000001011010(b) or 6604905A(h)
    47                                      
    48                                          ; exit(0)
    49 0000003D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 0000003F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
