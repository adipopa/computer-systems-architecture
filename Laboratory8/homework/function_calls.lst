     1                                  ; 18. Read a decimal number and a hexadecimal number from the keyboard. Display the number of 1's of the sum of the two numbers in decimal format. Example:
     2                                  ; a = 32 = 0010 0000b
     3                                  ; b = 1Ah = 0001 1010b
     4                                  ; 32 + 1Ah = 0011 1010b
     5                                  ; The value printed on the screen will be 4
     6                                  
     7                                  bits 32 ; assembling for the 32 bits architecture
     8                                  
     9                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    10                                  global start        
    11                                  
    12                                  ; declare external functions needed by our program
    13                                  extern exit, printf, scanf ; add printf and scanf as extern functions     
    14                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    15                                  import printf msvcrt.dll    ; tell the assembler that function printf is found in msvcrt.dll library
    16                                  import scanf msvcrt.dll     ; similar for scanf
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 00000000                    a dd 0 ; in this variable we'll store the first number read from the keyboard
    21 00000004 00000000                    b dd 0 ; same for the second number
    22                                      
    23 00000008 506C6561736520696E-         message1 db "Please insert number a: ", 0 ; ask the user to input the number a
    23 00000011 73657274206E756D62-
    23 0000001A 657220613A2000     
    24 00000021 506C6561736520696E-         message2 db "Please insert number b: ", 0 ; same for number b
    24 0000002A 73657274206E756D62-
    24 00000033 657220623A2000     
    25                                      
    26 0000003A 256400                      format1 db "%d", 0 ; specify that a is a decimal number (base 10)
    27 0000003D 257800                      format2 db "%x", 0 ; and b is a hexadecimal number (base 16)
    28                                      
    29 00000040 00000000                    cnt dd 0 ; variable used for counting the number of 1's
    30                                      
    31 00000044 546865206E756D6265-         resultFormat db "The number of 1's in the binary representation of the sum of a and b: %d", 0 ; %d will be replaced with a number
    31 0000004D 72206F662031277320-
    31 00000056 696E20746865206269-
    31 0000005F 6E6172792072657072-
    31 00000068 6573656E746174696F-
    31 00000071 6E206F662074686520-
    31 0000007A 73756D206F66206120-
    31 00000083 616E6420623A202564-
    31 0000008C 00                 
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                          ; will call printf(message1) => will print "a="
    37                                          ; place parameters on stack
    38 00000000 68[08000000]                    push dword message1 ; on the stack is placed the address of the string, not its value
    39 00000005 FF15[00000000]                  call [printf] ; call function printf for printing
    40 0000000B 83C404                          add esp, 4 * 1 ; free parameters on the stack; 4 = size of dword; 1 = number of parameters
    41                                          
    42                                          ; will scanf(format1, a) => will read a number in variable a
    43                                          ; place parameters on stack from right to left
    44 0000000E 68[00000000]                    push dword a ; address of a, not the value
    45 00000013 68[3A000000]                    push dword format1
    46 00000018 FF15[00000000]                  call [scanf] ; call function scanf for reading
    47 0000001E 83C408                          add esp, 4 * 2 ; free parameters on the stack; 4 = size of dword; 2 = number of parameters
    48                                          
    49                                          ; will to the same for the second number => will print "b="
    50 00000021 68[21000000]                    push dword message2
    51 00000026 FF15[00000000]                  call [printf]
    52 0000002C 83C404                          add esp, 4 * 1
    53                                          
    54                                          ; will scanf(format2, b) => will read a number in variable b
    55 0000002F 68[04000000]                    push dword b
    56 00000034 68[3D000000]                    push dword format2
    57 00000039 FF15[00000000]                  call [scanf]
    58 0000003F 83C408                          add esp, 4 * 2
    59                                          
    60 00000042 8B1D[00000000]                  mov ebx, [a] ; moving the value of a to EBX
    61 00000048 031D[04000000]                  add ebx, [b] ; we've got EBX = EBX + b = a + b
    62                                          
    63 0000004E B920000000                      mov ecx, 32 ; we need to loop through EBX a number of times equal to the registry's size (dword -> size 32)
    64                                          
    65                                          numberOfOnes:
    66 00000053 D1EB                                shr ebx, 1 ; we shift EBX to the right with one position (also setting CF equal to the byte that was shifted)
    67                                              
    68 00000055 7307                                jnc notAOne ; don't count the current byte if it is not 1
    69                                              
    70 00000057 8305[40000000]01                    add [cnt], dword 1 ; add 1 to the counter variable if CF=1
    71                                              
    72                                              notAOne:
    73                                              
    74 0000005E E2F3                            loop numberOfOnes
    75                                          
    76                                          ; will call printf(resultFormat, [cnt]) => will print: „The number of 1's of the sum of a and b: [cnt]”
    77                                          ; place parameters on the stack from right to left
    78 00000060 FF35[40000000]                  push dword [cnt]
    79 00000066 68[44000000]                    push dword resultFormat ; ! on the stack is placed the address of the string, not its value
    80 0000006B FF15[00000000]                  call [printf] ; call function printf for printing
    81 00000071 83C408                          add esp, 4 * 2 ; free parameters on the stack; 4 = size of dword; 2 = number of parameters
    82                                      
    83                                          ; ex: if a = 247, b = D5C -> expected result: 7 (1110 0101 0011b)
    84                                      
    85                                          ; exit(0)
    86 00000074 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    87 00000076 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
