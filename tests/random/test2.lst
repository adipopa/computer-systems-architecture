     1                                  ; Se citește un număr N și după N numere, să se calculeze suma lor(S) și să se scrie în fișier numerele de la 0 la S în binar. S<256
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit, printf, scanf, fopen, fprintf, fclose               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  import printf msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  import fopen msvcrt.dll
    15                                  import fprintf msvcrt.dll
    16                                  import fclose msvcrt.dll
    17                                  
    18                                  ; our data is declared here (the variables needed by our program)
    19                                  segment data use32 class=data
    20 00000000 4E203D2000                  msg_r db "N = ", 0
    21                                      
    22 00000005 00000000                    n dd 0
    23 00000009 256400                      format_r db "%d", 0
    24                                      
    25                                      max equ 100
    26 0000000C 00000000<rept>              int_list times 100 dd 0
    27                                      
    28 0000019C 00000000                    current_no dd 0
    29 000001A0 4E756D626572202564-         msg_r_list db "Number %d: ", 0
    29 000001A9 3A2000             
    30                                      
    31 000001AC 6F75747075742E7478-         file_name db "output.txt", 0
    31 000001B5 7400               
    32 000001B7 7700                        access_mode db "w", 0
    33 000001B9 FFFFFFFF                    file_descriptor dd -1
    34                                      
    35 000001BD 00<rept>                    binary_no times 9 db 0
    36 000001C6 25730A00                    format_p db "%s", 10, 0
    37                                  
    38                                  ; our code starts here
    39                                  segment code use32 class=code
    40                                      start:
    41 00000000 68[00000000]                    push msg_r
    42 00000005 FF15[00000000]                  call [printf]
    43 0000000B 83C404                          add esp, 4 * 1
    44                                          
    45 0000000E 68[05000000]                    push dword n
    46 00000013 68[09000000]                    push dword format_r
    47 00000018 FF15[00000000]                  call [scanf]
    48 0000001E 83C408                          add esp, 4 * 2
    49                                          
    50 00000021 BB00000000                      mov ebx, 0
    51 00000026 8B0D[05000000]                  mov ecx, dword [n]
    52                                          
    53                                          readNumbers:
    54 0000002C 51                                  push ecx
    55                                              
    56 0000002D 53                                  push ebx
    57 0000002E 68[A0010000]                        push msg_r_list
    58 00000033 FF15[00000000]                      call [printf]
    59 00000039 83C408                              add esp, 4 * 2
    60                                              
    61 0000003C 68[9C010000]                        push dword current_no
    62 00000041 68[09000000]                        push dword format_r
    63 00000046 FF15[00000000]                      call [scanf]
    64 0000004C 83C408                              add esp, 4 * 2
    65                                              
    66 0000004F A1[9C010000]                        mov eax, [current_no]
    67                                              
    68 00000054 89049D[0C000000]                    mov dword [int_list + ebx * 4], eax
    69                                              
    70 0000005B 43                                  inc ebx
    71 0000005C 59                                  pop ecx
    72 0000005D E2CD                            loop readNumbers
    73                                          
    74 0000005F 68[B7010000]                    push dword access_mode
    75 00000064 68[AC010000]                    push dword file_name
    76 00000069 FF15[00000000]                  call [fopen]
    77 0000006F 83C408                          add esp, 4 * 2
    78                                          
    79 00000072 83F800                          cmp eax, 0
    80 00000075 745B                            je finishProgram
    81                                          
    82 00000077 A3[B9010000]                    mov [file_descriptor], eax
    83                                          
    84 0000007C 89D9                            mov ecx, ebx
    85 0000007E BB00000000                      mov ebx, 0
    86                                          
    87                                          printNumbers:
    88 00000083 51                                  push ecx
    89                                              
    90 00000084 8B049D[0C000000]                    mov eax, dword [int_list + ebx * 4]
    91                                              
    92 0000008B B908000000                          mov ecx, 8
    93                                              convertToBinary:
    94 00000090 D1E8                                    shr eax, 1
    95 00000092 7309                                    jnc zeroBit
    96 00000094 C681[BC010000]31                        mov byte [binary_no + ecx - 1], '1'
    97 0000009B EB07                                    jmp endIf
    98                                                  zeroBit:
    99 0000009D C681[BC010000]30                        mov byte [binary_no + ecx - 1], '0'
   100                                                  endIf:
   101 000000A4 E2EA                                loop convertToBinary
   102                                              
   103 000000A6 68[BD010000]                        push dword binary_no
   104 000000AB 68[C6010000]                        push dword format_p
   105 000000B0 FF35[B9010000]                      push dword [file_descriptor]
   106 000000B6 FF15[00000000]                      call [fprintf]
   107 000000BC 83C40C                              add esp, 4 * 3
   108                                              
   109 000000BF 43                                  inc ebx
   110 000000C0 59                                  pop ecx
   111 000000C1 E2C0                            loop printNumbers
   112                                          
   113 000000C3 FF35[B9010000]                  push dword [file_descriptor]
   114 000000C9 FF15[00000000]                  call [fclose]
   115 000000CF 83C404                          add esp, 4 * 1
   116                                          
   117                                          finishProgram:
   118                                      
   119                                          ; exit(0)
   120 000000D2 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   121 000000D4 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
