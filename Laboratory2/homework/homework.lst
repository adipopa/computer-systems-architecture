     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; 1. Simple exercises
    14 00000000 0001                        a1 dw 256
    15 00000002 0100                        b1 dw 1
    16                                      
    17                                      ; 2/3. Additions, subtractions
    18 00000004 7C                          a2 db 124
    19 00000005 04                          b2 db 4
    20 00000006 02                          c2 db 2
    21 00000007 0C                          d2 db 12
    22                                      
    23 00000008 1C02                        a3 dw 540
    24 0000000A 4401                        b3 dw 324
    25 0000000C B001                        c3 dw 432
    26 0000000E 1401                        d3 dw 276
    27                                      
    28                                      ; 4/5. Multiplications, divisions
    29 00000010 03                          a4 db 3
    30 00000011 04                          b4 db 4
    31 00000012 02                          c4 db 2
    32 00000013 0801                        d4 dw 264
    33                                      
    34 00000015 07                          a5 db 7
    35 00000016 11                          b5 db 17
    36 00000017 05                          d5 db 5
    37                                      
    38                                  ; our code starts here
    39                                  segment code use32 class=code
    40                                      start:
    41                                          ; Problem 23 from each topic
    42                                          
    43                                          ; 1. Simple exercises:
    44 00000000 31C0                            xor eax, eax ; EAX = 0
    45                                          
    46 00000002 66A1[00000000]                  mov ax, [a1] ; AX = a
    47 00000008 66F725[02000000]                mul word [b1] ; result in BX:AX = 256 * 1
    48                                          
    49                                          ; 2. Additions, subtractions (a, b, c, d - byte):
    50 0000000F 31C0                            xor eax, eax ; EAX = 0
    51 00000011 31DB                            xor ebx, ebx ; EBX = 0
    52                                          
    53 00000013 A0[04000000]                    mov al, [a2] ; AL = a
    54 00000018 2A05[06000000]                  sub al, [c2] ; AL = AL - c = a - c
    55                                          
    56 0000001E 8A1D[05000000]                  mov bl, [b2] ; BL = b
    57 00000024 021D[05000000]                  add bl, [b2] ; BL = BL + b = b + b
    58 0000002A 021D[07000000]                  add bl, [d2] ; BL = BL + d = b + b + d
    59                                          
    60 00000030 00D8                            add al, bl ; result: AL = (a - c) + (b + b + d)
    61                                          
    62                                          ; 3. Additions, subtractions (a, b, c, d - word):
    63 00000032 31C0                            xor eax, eax ; EAX = 0
    64 00000034 31DB                            xor ebx, ebx ; EBX = 0
    65                                          
    66 00000036 66A1[08000000]                  mov ax, [a3] ; AX = a
    67 0000003C 660305[0A000000]                add ax, [b3] ; AX = AX + b = a + b
    68 00000043 660305[0C000000]                add ax, [c3] ; AX = AX + c = a + b +c
    69                                          
    70 0000004A 668B1D[0E000000]                mov bx, [d3] ; BX = d
    71 00000051 66031D[0E000000]                add bx, [d3] ; BX = BX + d = d + d
    72                                          
    73 00000058 6629D8                          sub ax, bx ; result: AX = (a+b+c)-(d+d)
    74                                          
    75                                          ; 4. Multiplications, divisions (a, b, c - byte, d - word)
    76 0000005B 31C0                            xor eax, eax ; EAX = 0
    77 0000005D 31DB                            xor ebx, ebx ; EBX = 0
    78                                          
    79 0000005F A0[10000000]                    mov al, [a4] ; AL = a
    80 00000064 0205[11000000]                  add al, [b4] ; AL = AL + b = a + b
    81 0000006A B103                            mov cl, 3 ; CL = 3
    82 0000006C F6E1                            mul byte cl ; AX = AL * CL = (a + b) * 3
    83 0000006E 6689C3                          mov bx, ax ; BX = AX = (a + b) * 3
    84                                          
    85 00000071 A0[12000000]                    mov al, [c4] ; AL = c
    86 00000076 B102                            mov cl, 2 ; CL = 2
    87 00000078 F6E1                            mul byte cl ; AX = AL * CL = c * 2
    88                                          
    89 0000007A 6629C3                          sub bx, ax ; BX = BX - AX = (a + b) * 3 - c * 2
    90 0000007D 66031D[13000000]                add bx, [d4] ; result: BX = BX - d = [(a + b) * 3 - c * 2] + d
    91                                          
    92                                          ; 5. Multiplications, divisions (a, b, c, d - byte, e, f, g, h - word)
    93 00000084 31C0                            xor eax, eax ; EAX = 0
    94 00000086 31DB                            xor ebx, ebx ; EBX = 0
    95                                          
    96 00000088 A0[15000000]                    mov al, [a5] ; AL = a
    97 0000008D 0205[16000000]                  add al, [b5] ; AL = AL + b = a + b
    98 00000093 B102                            mov cl, 2 ; CL = 2
    99 00000095 F6E1                            mul byte cl ; AX = AL * CL = (a + b) * 2
   100                                          
   101 00000097 8A1D[15000000]                  mov bl, [a5] ; BL = a
   102 0000009D 021D[17000000]                  add bl, [d5] ; BL = BL + d = a + d
   103                                          
   104 000000A3 F6F3                            div byte bl ; result: AL = AX / BL = [(a + b) * 2] / (a + d)
   105                                      
   106                                          ; exit(0)
   107 000000A5 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   108 000000A7 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
